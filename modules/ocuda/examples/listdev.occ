--
--	listdev.occ -- list CUDA devices
--	Copyright (C) 2013 Fred Barnes <frmb@kent.ac.uk>
--
--	This program is free software; you can redistribute it and/or modify
--	it under the terms of the GNU General Public License as published by
--	the Free Software Foundation; either version 2 of the License, or
--	(at your option) any later version.
--
--	This program is distributed in the hope that it will be useful,
--	but WITHOUT ANY WARRANTY; without even the implied warranty of
--	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--	GNU General Public License for more details.
--
--	You should have received a copy of the GNU General Public License
--	along with this program; if not, write to the Free Software
--	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
--

#INCLUDE "course.module"
#INCLUDE "ocuda.module"


PROC listdev (CHAN BYTE scr!)
  INT dcnt, res:
  SEQ
    dcnt := 0
    ocuda.init (dcnt, res)
    IF
      res <> 0
        SEQ
          out.string ("listdev: failed to initialise CUDA library*n", 0, scr!)
          STOP
      TRUE
        SKIP

    SEQ
      out.string ("listdev: found ", 0, scr!)
      out.int (dcnt, 0, scr!)
      out.string (" devices.*n", 0, scr!)

    SEQ i = 0 FOR dcnt
      OCUDA.DEVINFO dinf:
      SEQ
        ocuda.devinfo (i, dinf, res)
        IF
          res = 0
            SEQ
              out.int (i, 1, scr!)
              out.string (": [", 0, scr!)
              out.string ([dinf[dname] FOR dinf[dname.len]], 0, scr!)
              out.string ("] compute-capability ", 0, scr!)
              out.int ((dinf[cversion] >> 16) /\ #FFFF, 0, scr!)
              scr ! '.'
              out.int (dinf[cversion] /\ #FFFF, 0, scr!)
              out.string (",  integrated: ", 0, scr!)
              IF
                dinf[integrated] = 0
                  out.string ("no", 0, scr!)
                TRUE
                  out.string ("yes", 0, scr!)
              out.string ("*n", 0, scr!)

              out.string ("   compute-mode: ", 0, scr!)
              CASE dinf[cmode]
                OCUDA.CMODE.DEFAULT
                  out.string ("default (multi-thread, multi-proc)*n", 0, scr!)
                OCUDA.CMODE.EXCLUSIVE
                  out.string ("exclusive (single-thread, single-proc)*n", 0, scr!)
                OCUDA.CMODE.PROHIBITED
                  out.string ("prohibited (not for CUDA)*n", 0, scr!)
                OCUDA.CMODE.EXCLUSIVEPROC
                  out.string ("exclusive process (multi-thread, single-proc)*n", 0, scr!)

              out.string ("   mem: global: ", 0, scr!)
              out.int (dinf[global.mem], 0, scr!)
              out.string (" KiB,  shared-per-block: ", 0, scr!)
              out.int (dinf[shared.mem.per.block], 0, scr!)
              out.string (" KiB,  const-data: ", 0, scr!)
              out.int (dinf[total.const.mem], 0, scr!)
              out.string (" KiB,  L2-cache: ", 0, scr!)
              out.int (dinf[l2.cache.size], 0, scr!)
              out.string (" KiB*n", 0, scr!)

              out.string ("   regs-per-block: ", 0, scr!)
              out.int (dinf[regs.per.block], 0, scr!)
              out.string (",  warp-size: ", 0, scr!)
              out.int (dinf[warp.size], 0, scr!)
              out.string (" threads,  max-threads-per_block: ", 0, scr!)
              out.int (dinf[max.threads.per.block], 0, scr!)
              out.string ("*n", 0, scr!)
              
              out.string ("   max-block-dims: [", 0, scr!)
              out.int (dinf[max.threads.dim][0], 0, scr!)
              out.string (",", 0, scr!)
              out.int (dinf[max.threads.dim][1], 0, scr!)
              out.string (",", 0, scr!)
              out.int (dinf[max.threads.dim][2], 0, scr!)
              out.string ("],  max-grid-dims: [", 0, scr!)
              out.int (dinf[max.grid.size][0], 0, scr!)
              out.string (",", 0, scr!)
              out.int (dinf[max.grid.size][1], 0, scr!)
              out.string (",", 0, scr!)
              out.int (dinf[max.grid.size][2], 0, scr!)
              out.string ("]*n", 0, scr!)

              out.string ("   clock-speed: ", 0, scr!)
              out.int (dinf[clock.rate], 0, scr!)
              out.string (" KHz,  mem-clock: ", 0, scr!)
              out.int (dinf[mem.clock.rate], 0, scr!)
              out.string (" KHz,  mem-width: ", 0, scr!)
              out.int (dinf[mem.bus.width], 0, scr!)
              out.string (" bits*n", 0, scr!)

              out.string ("   multiprocessor-count: ", 0, scr!)
              out.int (dinf[mproc.count], 0, scr!)
              out.string (",  max-threads-per: ", 0, scr!)
              out.int (dinf[max.threads.per.mproc], 0, scr!)
              out.string ("*n", 0, scr!)

              out.string ("   can-map-host-memory: ", 0, scr!)
              IF
                dinf[can.map.host.memory] = 0
                  out.string ("no", 0, scr!)
                TRUE
                  out.string ("yes", 0, scr!)
              out.string (",  unified-addressing: ", 0, scr!)
              IF
                dinf[unified.addressing] = 0
                  out.string ("no", 0, scr!)
                TRUE
                  out.string ("yes", 0, scr!)
              out.string (",  concurrent-kernel-exec: ", 0, scr!)
              IF
                dinf[concur.kernels] = 0
                  out.string ("no", 0, scr!)
                TRUE
                  out.string ("yes", 0, scr!)
              out.string ("*n", 0, scr!)

              out.string ("   async-engines: ", 0, scr!)
              out.int (dinf[async.engine.count], 0, scr!)
              out.string (",  PCI (bus,dev,dom): ", 0, scr!)
              out.int (dinf[pci.bus.id], 0, scr!)
              out.string (":", 0, scr!)
              out.int (dinf[pci.device.id], 0, scr!)
              out.string (".", 0, scr!)
              out.int (dinf[pci.domain.id], 0, scr!)
              out.string (",  tcc-driver: ", 0, scr!)
              IF
                dinf[tcc.driver] = 0
                  out.string ("no", 0, scr!)
                TRUE
                  out.string ("yes", 0, scr!)
              out.string ("*n", 0, scr!)
          TRUE
            SKIP
:

